name: K6 Performance Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Ejecutar tests automáticamente cada día a las 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Tipo de test a ejecutar'
        required: false
        default: 'ramp'
        type: choice
        options:
          - 'ramp'
          - 'spike'
          - 'soak'
          - 'all'
      base_url:
        description: 'URL base para las pruebas'
        required: false
        default: 'http://localhost:8000'

env:
  BASE_URL: http://localhost:8000

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      test-type: ${{ steps.determine-tests.outputs.test-type }}
    steps:
      - name: Determine test type
        id: determine-tests
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "test-type=${{ github.event.inputs.test_type }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            echo "test-type=all" >> $GITHUB_OUTPUT
          else
            echo "test-type=ramp" >> $GITHUB_OUTPUT
          fi

  k6-ramp-tests:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.test-type == 'ramp' || needs.setup.outputs.test-type == 'all'
    strategy:
      matrix:
        test: [split, merge, protect, watermark, upload]
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jinja2 matplotlib seaborn pandas numpy
          # Install Django backend dependencies
          if [ -f backend/requirements.txt ]; then
            pip install -r backend/requirements.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install django djangorestframework python-decouple psycopg2-binary pillow
          fi

      - name: Setup Docker
        run: docker pull grafana/k6:latest

      - name: Create results directory
        run: mkdir -p tests/k6/results

      - name: Setup Django environment
        run: |
          cd backend
          # Create .env file if it doesn't exist
          if [ ! -f .env ]; then
            echo "DEBUG=True" > .env
            echo "SECRET_KEY=test-secret-key-for-ci" >> .env
            echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/testdb" >> .env
          fi

      - name: Run Django migrations
        run: |
          cd backend
          python manage.py migrate --noinput

      - name: Start Django server
        run: |
          cd backend
          python manage.py runserver 8000 &
          sleep 10
          # Verificar que el servidor esté corriendo
          curl -f http://localhost:8000/ || (echo "Django server failed to start" && exit 1)

      - name: Run K6 ${{ matrix.test }} ramp test
        run: make k6-${{ matrix.test }}-ramp BASE_URL=http://localhost:8000
        continue-on-error: true

      - name: Upload ${{ matrix.test }} ramp results
        uses: actions/upload-artifact@v4
        with:
          name: k6-${{ matrix.test }}-ramp-results
          path: |
            tests/k6/results/${{ matrix.test }}-ramp.json
            tests/k6/results/${{ matrix.test }}-ramp-report.html
          retention-days: 30

  k6-spike-tests:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.test-type == 'spike' || needs.setup.outputs.test-type == 'all'
    strategy:
      matrix:
        test: [split, merge, protect, watermark, upload]
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jinja2 matplotlib seaborn pandas numpy
          # Install Django backend dependencies
          if [ -f backend/requirements.txt ]; then
            pip install -r backend/requirements.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install django djangorestframework python-decouple psycopg2-binary pillow
          fi

      - name: Setup Docker
        run: docker pull grafana/k6:latest

      - name: Create results directory
        run: mkdir -p tests/k6/results

      - name: Setup Django environment
        run: |
          cd backend
          # Create .env file if it doesn't exist
          if [ ! -f .env ]; then
            echo "DEBUG=True" > .env
            echo "SECRET_KEY=test-secret-key-for-ci" >> .env
            echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/testdb" >> .env
          fi

      - name: Run Django migrations
        run: |
          cd backend
          python manage.py migrate --noinput

      - name: Start Django server
        run: |
          cd backend
          python manage.py runserver 8000 &
          sleep 10
          # Verificar que el servidor esté corriendo
          curl -f http://localhost:8000/ || (echo "Django server failed to start" && exit 1)

      - name: Run K6 ${{ matrix.test }} spike test
        run: make k6-${{ matrix.test }}-spike BASE_URL=http://localhost:8000
        continue-on-error: true

      - name: Upload ${{ matrix.test }} spike results
        uses: actions/upload-artifact@v4
        with:
          name: k6-${{ matrix.test }}-spike-results
          path: |
            tests/k6/results/${{ matrix.test }}-spike.json
            tests/k6/results/${{ matrix.test }}-spike-report.html
          retention-days: 30

  k6-soak-tests:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.test-type == 'soak' || needs.setup.outputs.test-type == 'all'
    strategy:
      matrix:
        test: [split, merge, protect, watermark, upload]
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jinja2 matplotlib seaborn pandas numpy
          # Install Django backend dependencies
          if [ -f backend/requirements.txt ]; then
            pip install -r backend/requirements.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install django djangorestframework python-decouple psycopg2-binary pillow
          fi

      - name: Setup Docker
        run: docker pull grafana/k6:latest

      - name: Create results directory
        run: mkdir -p tests/k6/results

      - name: Setup Django environment
        run: |
          cd backend
          # Create .env file if it doesn't exist
          if [ ! -f .env ]; then
            echo "DEBUG=True" > .env
            echo "SECRET_KEY=test-secret-key-for-ci" >> .env
            echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/testdb" >> .env
          fi

      - name: Run Django migrations
        run: |
          cd backend
          python manage.py migrate --noinput

      - name: Start Django server
        run: |
          cd backend
          python manage.py runserver 8000 &
          sleep 10
          # Verificar que el servidor esté corriendo
          curl -f http://localhost:8000/ || (echo "Django server failed to start" && exit 1)

      - name: Run K6 ${{ matrix.test }} soak test
        run: make k6-${{ matrix.test }}-soak BASE_URL=http://localhost:8000
        continue-on-error: true

      - name: Upload ${{ matrix.test }} soak results
        uses: actions/upload-artifact@v4
        with:
          name: k6-${{ matrix.test }}-soak-results
          path: |
            tests/k6/results/${{ matrix.test }}-soak.json
            tests/k6/results/${{ matrix.test }}-soak-report.html
          retention-days: 30

  generate-combined-reports:
    runs-on: ubuntu-latest
    needs: [setup, k6-ramp-tests, k6-spike-tests, k6-soak-tests]
    if: always() && (needs.k6-ramp-tests.result == 'success' || needs.k6-spike-tests.result == 'success' || needs.k6-soak-tests.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jinja2 matplotlib seaborn pandas numpy

      - name: Create results directory
        run: mkdir -p tests/k6/results

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Consolidate results
        run: |
          find artifacts/ -name "*.json" -exec cp {} tests/k6/results/ \;
          find artifacts/ -name "*.html" -exec cp {} tests/k6/results/ \;

      - name: Generate combined reports
        run: |
          if ls tests/k6/results/*-ramp.json 1> /dev/null 2>&1; then
            python3 tests/k6/generate_combined_report.py "tests/k6/results" "ramp" || true
          fi
          if ls tests/k6/results/*-spike.json 1> /dev/null 2>&1; then
            python3 tests/k6/generate_combined_report.py "tests/k6/results" "spike" || true
          fi
          if ls tests/k6/results/*-soak.json 1> /dev/null 2>&1; then
            python3 tests/k6/generate_combined_report.py "tests/k6/results" "soak" || true
          fi

      - name: Generate master report
        run: |
          python3 tests/k6/generate_master_report.py "tests/k6/results" || true

      - name: Generate CI artifacts
        run: make k6-ci-artifacts || true

      - name: Upload combined reports
        uses: actions/upload-artifact@v4
        with:
          name: k6-combined-reports
          path: |
            tests/k6/results/*-combined-report.html
            tests/k6/results/master-report.html
            tests/k6/results/ci/
          retention-days: 90

  publish-results:
    runs-on: ubuntu-latest
    needs: [generate-combined-reports]
    if: always() && needs.generate-combined-reports.result == 'success'
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download combined reports
        uses: actions/download-artifact@v4
        with:
          name: k6-combined-reports
          path: reports/

      - name: Setup Pages
        uses: actions/configure-pages@v4
        if: github.ref == 'refs/heads/main'

      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        if: github.ref == 'refs/heads/main'
        with:
          path: reports/

      - name: Deploy to Pages
        id: deployment
        uses: actions/deploy-pages@v4
        if: github.ref == 'refs/heads/main'

  notification:
    runs-on: ubuntu-latest
    needs: [k6-ramp-tests, k6-spike-tests, k6-soak-tests, generate-combined-reports]
    if: always()
    steps:
      - name: Test Results Summary
        run: |
          echo "## 📊 K6 Performance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Ramp Tests**: ${{ needs.k6-ramp-tests.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Spike Tests**: ${{ needs.k6-spike-tests.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Soak Tests**: ${{ needs.k6-soak-tests.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Combined Reports**: ${{ needs.generate-combined-reports.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📋 Check the artifacts section for detailed reports and results." >> $GITHUB_STEP_SUMMARY